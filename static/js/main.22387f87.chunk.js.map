{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/header.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","color","border","borderRadius","cursor","float","Todos","todos","map","key","headerStyle","textAlign","linkStyle","Header","to","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","target","name","value","display","placeholder","flex","className","About","Fragment","App","console","log","axios","delete","then","res","filter","post","data","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.22387f87.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport Todos from './Todos';\r\n\r\nexport class TodoItem extends Component {\r\n    getStyle = () => {\r\n        return {\r\n            background:'#f4f4f4',\r\n            padding:'10px',\r\n            borderBottom:'1px #ccc dotted',\r\n            textDecoration:this.props.todo.completed ?\r\n            'line-through' : 'none'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { id, title } = this.props.todo;\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <p>\r\n                <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)}></input> {''}\r\n                {title}\r\n                <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>x</button>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired\r\n}\r\n\r\nconst btnStyle = {\r\n    background:'#ff0000',\r\n    color:'#fff',\r\n    border:'none',\r\n    padding:'5px 9px',\r\n    borderRadius:'20%',\r\n    cursor:'pointer',\r\n    float:'right'\r\n}\r\nconst itemStyle = {\r\n    backgroungColor: '#f4f4f4'\r\n}\r\n\r\nexport default TodoItem\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends Component {\r\n    \r\n  render(){\r\n    //   console.log('Todos : ',this.props.todos);\r\n      return this.props.todos.map((todo) => (\r\n          <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete}\r\n          delTodo={this.props.delTodo}/>\r\n      ));\r\n  }\r\n}\r\n\r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Todos;\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Header() {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>TodoList</h1>\r\n            <Link \r\n            style={linkStyle} to=\"/\">Home</Link> | <Link \r\n            style={linkStyle} to=\"/about\">About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background:'#333',\r\n    color:'#fff',\r\n    textAlign:'center',\r\n    padding:'10px'\r\n}\r\n\r\nconst linkStyle = {\r\n    color:'#fff',\r\n    textDecoration : 'none'\r\n}\r\n\r\nexport default Header\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class AddTodo extends Component {\r\n    state = {\r\n        title :''\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({ title: ''});\r\n    }\r\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value });\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} style={{display:'flex'}}>\r\n                <input type=\"text\" name=\"title\" placeholder=\"Add Todo\" style={{flex:'10', padding:'5px'}}\r\n                value={this.state.title}\r\n                onChange={this.onChange}\r\n                ></input>\r\n                <input type=\"submit\" value=\"submit\" className=\"btn\" style={{flex:'1'}}\r\n                ></input>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nAddTodo.propTypes = {\r\n    addTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddTodo\r\n","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p>This is the TodoList app v1.0.0 It is part of a React crash cource</p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default About;\r\n","import React, { Component } from 'react';\n\nimport Todos from './components/Todos';\n\nimport './App2.css';\nimport Header from './components/layout/header';\nimport AddTodo from './components/AddTodo';\nimport About from './components/pages/About';\nimport uuid from 'uuid';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport axios from 'axios';\n\nclass App extends Component {\nstate = {\n  todos:[]\n}\n\ncomponentDidMount(){\n  axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n  .then(res => this.setState({ todos: res.data }))\n}\n\nmarkComplete = (id) => {\n  console.log('From app.js', id);\n  this.setState({ todos:this.state.todos.map(todo => {\n    if(todo.id === id) {\n      todo.completed = !todo.completed\n    }\n    return todo;\n  })});\n  \n}\n\n// Del todo\ndelTodo = (id) => { \n  console.log(id);\n  axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n  .then( res => this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)]}) );\n  \n  \n}\n\n// Add Todo \naddTodo = (title) => {\n  axios.post('https://jsonplaceholder.typicode.com/todos', {\n    title,\n    completed:false\n  })\n  .then(res => this.setState({ todos : [...this.state.todos, res.data ] }))\n  ;\n}\n  render (){\n    // console.log('App :', this.state.todos);\n    \n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header/>\n            <Route exact path=\"/\" render={props => (\n              <React.Fragment>\n                <AddTodo addTodo={this.addTodo}/>\n                <Todos todos={this.state.todos} markComplete={this.markComplete}\n                delTodo={this.delTodo}></Todos>\n              </React.Fragment>\n            )}></Route>\n\n            <Route path=\"/about\" component={About}\n            ></Route>\n            \n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}